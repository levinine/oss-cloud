service: oss-cloud-backend

provider:
  name: aws
  runtime: nodejs10.x
  region: eu-west-1
  stage: ${opt:stage, 'local'}
  environment:
    MYSQL_ENDPOINT: ${ssm:/oss-cloud/${self:provider.stage}/mysql-endpoint~true}
    MYSQL_PORT: ${ssm:/oss-cloud/${self:provider.stage}/mysql-port~true}
    MYSQL_DATABASE: ${ssm:/oss-cloud/${self:provider.stage}/mysql-database~true}
    MYSQL_USER: ${ssm:/oss-cloud/${self:provider.stage}/mysql-user~true}
    MYSQL_PASSWORD: ${ssm:/oss-cloud/${self:provider.stage}/mysql-password~true}
    GITHUB_APP_ID: ${ssm:/oss-cloud/${self:provider.stage}/github-app-id~true}
    GITHUB_APP_PRIVATE_KEY: ${ssm:/oss-cloud/${self:provider.stage}/github-app-private-key~true}
    GITHUB_APP_INSTALLATION_ID: ${ssm:/oss-cloud/${self:provider.stage}/github-app-installation-id~true}
    SCHEDULER_RATE: ${file(./config/${self:provider.stage}.yml):SCHEDULER_RATE}
    AUTH_REGION: ${ssm:/oss-cloud/${self:provider.stage}/auth-region~true}
    AUTH_AWS_ACCOUNT_ID: ${ssm:/oss-cloud/${self:provider.stage}/auth-aws-account-id~true}
    AUTH_USER_POOL_ID: ${ssm:/oss-cloud/${self:provider.stage}/auth-user-pool-id~true}

plugins:
  - serverless-offline-scheduler
  - serverless-offline-dotenv
  - serverless-offline
  - serverless-vpc-plugin

custom:
  vpcConfig:
    cidrBlock: '172.16.0.0/16'
    createNatGateway: true
    createDbSubnet: true
    createParameters: true
    zones:
      - eu-west-1a
      - eu-west-1b
      - eu-west-1c
    subnetGroups:
      - rds
    exportOutputs: true

functions:
  addContributor:
    handler: handler.addContributor
    events:
      - http:
          path: addContributor
          method: post
          cors: true

  getUser:
    handler: handler.getUser

  getContributors:
    handler: handler.getContributors
    events:
      - http:
          path: contributors
          method: get
          cors: true

  getContributions:
    handler: handler.getContributions
    events:
      - http:
          path: contributions
          method: get
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.environment.AUTH_REGION}:${self:provider.environment.AUTH_AWS_ACCOUNT_ID}:userpool/${self:provider.environment.AUTH_USER_POOL_ID}

  contributorVisibleContributions:
    handler: handler.getVisibleUserContributions
    events:
      - http:
          path: contributorVisible
          method: get
          cors: true

  updateNextContributor:
    handler: handler.updateNextContributor
    events:
      - schedule:
          rate: rate(${self:provider.environment.SCHEDULER_RATE})

  updateContributionStatus:
    handler: handler.updateContributionStatus
    events:
      - http:
          path: contributionStatus
          method: post
          cors: true
          authorizer:
            arn: arn:aws:cognito-idp:${self:provider.environment.AUTH_REGION}:${self:provider.environment.AUTH_AWS_ACCOUNT_ID}:userpool/${self:provider.environment.AUTH_USER_POOL_ID}

resources:
  Resources:
    ServerlessStorageSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'Inbound rules for DB'
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            SourceSecurityGroupId: !GetAtt AppSecurityGroup.GroupId
    #proveri jos jednom
    PublicOutboundRule1:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        GroupId: !GetAtt AppSecurityGroup.GroupId
        DestinationSecurityGroupId: !Ref ServerlessStorageSecurityGroup
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'

