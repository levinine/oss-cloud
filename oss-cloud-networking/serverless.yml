resources:
  Resources:
    VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: '172.16.0.0/16'
        EnableDnsHostnames: 'true'
        EnableDnsSupport: 'true'
        InstanceTenancy: 'default'
    PublicSubnet:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: 'eu-west-1a'
        CidrBlock: '172.16.0.0/24'
        VpcId: !Ref VPC
    LambdaSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: 'eu-west-1a'
        CidrBlock: '172.16.1.0/24'
        VpcId: !Ref VPC
    LambdaSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: 'eu-west-1b'
        CidrBlock: '172.16.2.0/24'
        VpcId: !Ref VPC
    LambdaSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: 'This group contains subnets for Lambda functions'
        DBSubnetGroupName: 'lambda-subnet-group'
        SubnetIds:
          - !Ref LambdaSubnet1
          - !Ref LambdaSubnet2
    DbSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: 'eu-west-1a'
        CidrBlock: '172.16.3.0/24'
        VpcId: !Ref VPC
    DbSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: 'eu-west-1b'
        CidrBlock: '172.16.4.0/24'
        VpcId: !Ref VPC
    DBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: 'This group contains subnets for RDS instance'
        DBSubnetGroupName: 'rds-subnet-group'
        SubnetIds:
          - !Ref DbSubnet1
          - !Ref DbSubnet2
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    VPCGatewayAttach:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        InternetGatewayId: !Ref InternetGateway
        VpcId: !Ref VPC
    EIP:
      DependsOn: VPCGatewayAttach
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    NAT:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
            - EIP
            - AllocationId
        SubnetId: !Ref PublicSubnet
    DHCP:
      Type: 'AWS::EC2::DHCPOptions'
      Properties:
        DomainName: eu-west-1.compute.internal
        DomainNameServers:
          - AmazonProvidedDNS
    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: 'Security group for lambda functions'
        GroupName: 'lambda-security-group'
#        SecurityGroupEgress:
#          - IpProtocol: tcp
#            FromPort: 3306
#            ToPort: 3306
#            DestinationSecurityGroupId: !GetAtt DBSecurityGroup.Group
#          - IpProtocol: tcp
#            FromPort: 80
#            ToPort: 80
#            CidrIp: 0.0.0.0/0
    PublicOutboundRule1:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        DependsOn:
          - LambdaSecurityGroup
          - DBSecurityGroup
        GroupId: !GetAtt LambdaSecurityGroup.GroupId
        DestinationSecurityGroupId: !Ref DBSecurityGroup
        IpProtocol: tcp
        FromPort: '3306'
        ToPort: '3306'
        #        SecurityGroupIngress:
        #          - Ingress
        #        Tags:
        #          - Tag
        VpcId: !Ref VPC
    DBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        DependsOn: LambdaSecurityGroup
        GroupDescription: 'Security group for DB instance'
        GroupName: 'db-security-group'
        #        SecurityGroupEgress:
        #          - Egress
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '3306'
            ToPort: '3306'
            DestinationSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
        #        Tags:
        #          - Tag
        VpcId: !Ref VPC
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref myVpc
        Tags:
          - Key: purpose
            Value: 'public-rt'
    PublicRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway
    PublicRTAssociation:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref PublicSubnet
        RouteTableId: !Ref PublicRouteTable
    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref myVpc
        Tags:
          - Key: purpose
            Value: 'private-rt'
    PrivateRoute:
      Type: 'AWS::EC2::Route'
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NAT
    PrivateRTAssociation1:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref LambdaSubnet1
        RouteTableId: !Ref PrivateRouteTable
    PrivateRTAssociation2:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref LambdaSubnet2
        RouteTableId: !Ref PrivateRouteTable
    PrivateRTAssociation3:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref DbSubnet1
        RouteTableId: !Ref PrivateRouteTable
    PrivateRTAssociation4:
      Type: 'AWS::EC2::SubnetRouteTableAssociation'
      Properties:
        SubnetId: !Ref DbSubnet2
        RouteTableId: !Ref PrivateRouteTable
    PublicNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
        Tags:
          - Key: 'purspose'
            Value: 'public'
        VpcId: !Ref VPC
    InboundHTTPSNACL:
      Type: 'AWS::EC2::NetworkAclEntry'
      Properties:
        NetworkAclId: !Ref PublicNACL
        RuleNumber: '100'
        Protocol: '6'
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: '0.0.0.0/0'
        PortRange:
          From: '443'
          To: '443'
    OutboundNACL:
      Type: 'AWS::EC2::NetworkAclEntry'
      Properties:
        NetworkAclId: !Ref PublicNACL
        RuleNumber: '100'
        Protocol: '-1'
        RuleAction: 'allow'
        Egress: 'true'
        CidrBlock: '0.0.0.0/0'
        PortRange:
          From: '-1'
          To: '-1'
    ConnectorPublic:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        NetworkAclId: !Ref PublicNACL
        SubnetId: !Ref PublicSubnet
    PrivateNACL:
      Type: AWS::EC2::NetworkAcl
      Properties:
        Tags:
          - Key: 'purspose'
            Value: 'private'
        VpcId: !Ref VPC
    InboundNACL1:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PrivateNACL
        RuleNumber: '100'
        Protocol: '6'
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: '172.16.1.0/24'
        PortRange:
          From: '3306'
          To: '3306'
    InboundNACL2:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PrivateNACL
        RuleNumber: '101'
        Protocol: '6'
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: '172.16.2.0/24'
        PortRange:
          From: '3306'
          To: '3306'
    InboundNACL3:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PrivateNACL
        RuleNumber: '102'
        Protocol: '6'
        RuleAction: "allow"
        Egress: "false"
        CidrBlock: '0.0.0.0/0'
        PortRange:
          From: '1024'
          To: '65535'
    OutboundPrivateNACL:
      Type: AWS::EC2::NetworkAclEntry
      Properties:
        NetworkAclId: !Ref PrivateNACL
        RuleNumber: '100'
        Protocol: '-1'
        RuleAction: 'allow'
        Egress: 'true'
        CidrBlock: '0.0.0.0/0'
        PortRange:
          From: '-1'
          To: '-1'
    ConnectorPrivate1:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        NetworkAclId: !Ref PrivateNACL
        SubnetId: !Ref LambdaSubnet1
    ConnectorPrivate2:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        NetworkAclId: !Ref PrivateNACL
        SubnetId: !Ref LambdaSubnet2
    ConnectorPrivate3:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        NetworkAclId: !Ref PrivateNACL
        SubnetId: !Ref DbSubnet1
    ConnectorPrivate4:
      Type: AWS::EC2::SubnetNetworkAclAssociation
      Properties:
        NetworkAclId: !Ref PrivateNACL
        SubnetId: !Ref DbSubnet2


