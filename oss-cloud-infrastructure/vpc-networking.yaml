---
#  AWSTemplateFormatVersion: '2010-09-09'
#  Description: 'Create VPC with private subnets for lambdas and db'

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      InstanceTenancy: 'default'
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-igw"
        - Key: Network
          Value: Public
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-eip"
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIP
          - AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-#{PublicSubnet.AvailabilityZone}"
        - Key: Network
          Value: Public
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.0.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-public-eu-west-1a"
        - Key: Network
          Value: Public
  LambdaSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.1.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-lambda-eu-west-1a"
        - Key: Network
          Value: Private
  LambdaSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-lambda-eu-west-1b"
        - Key: Network
          Value: Private
  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'eu-west-1a'
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-db-eu-west-1a"
        - Key: Network
          Value: Private
  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: 'eu-west-1b'
      CidrBlock: '10.0.4.0/24'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-db-eu-west-1b"
        - Key: Network
          Value: Private
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'This group contains subnets for RDS instance'
      DBSubnetGroupName: 'rds-subnet-group'
      SubnetIds:
        - !Ref DbSubnet1
        - !Ref DbSubnet2
  DHCPOptions:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: "eu-west-1.compute.internal"
      #        Fn::Sub: "${AWS::Region}.compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-DHCPOptionsSet"
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId:
        Ref: DHCPOptions
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for lambda functions'
      GroupName: 'lambda-security-group'
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-lambda-sg"
  InboundRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      CidrIp: 0.0.0.0/0
      FromPort: 443
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      ToPort: 443
  OutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LambdaSecurityGroup.GroupId
      #      DestinationSecurityGroupId: !Ref DBSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
  OutboundRule2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !GetAtt LambdaSecurityGroup.GroupId
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for DB instance'
      GroupName: 'db-security-group'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !GetAtt LambdaSecurityGroup.GroupId
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: purpose
          Value: 'public-rt'
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-public-rt"
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  #      DependsOn:
  #        - InternetGatewayAttachment
  PublicRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: purpose
          Value: 'private-rt'
        - Key: Name
          Value:
            Fn::Sub: "#{AWS::StackName}-private-rt"
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT
  PrivateRTAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref LambdaSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref LambdaSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTAssociation3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DbSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateRTAssociation4:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DbSubnet2
      RouteTableId: !Ref PrivateRouteTable
  PublicNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: 'purspose'
          Value: 'public'
      VpcId: !Ref VPC
  InboundHTTPSNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '443'
        To: '443'
  OutboundNACL:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  ConnectorPublic:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PublicNACL
      SubnetId: !Ref PublicSubnet
  PrivateNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: 'purspose'
          Value: 'private'
      VpcId: !Ref VPC
  InboundNACL1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: '100'
      Protocol: '6'
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: '10.0.1.0/24'
      PortRange:
        From: '3306'
        To: '3306'
  InboundNACL2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: '101'
      Protocol: '6'
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: '10.0.2.0/24'
      PortRange:
        From: '3306'
        To: '3306'
  InboundNACL3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: '102'
      Protocol: '6'
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '1024'
        To: '65535'
  OutboundPrivateNACL:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PrivateNACL
      RuleNumber: '100'
      Protocol: '-1'
      RuleAction: 'allow'
      Egress: 'true'
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: '-1'
        To: '-1'
  ConnectorPrivate1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref LambdaSubnet1
  ConnectorPrivate2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref LambdaSubnet2
  ConnectorPrivate3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref DbSubnet1
  ConnectorPrivate4:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref PrivateNACL
      SubnetId: !Ref DbSubnet2
  DynamodbVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: com.amazonaws.eu-west-1.dynamodb
      #        Fn::Sub: com.amazonaws.${AWS::Region}.dynamodb
      VpcId:
        Ref: VPC
      VpcEndpointType: Gateway
      RouteTableIds:
        - Ref: PrivateRouteTable
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: "*"
            Resource: "*"
            Action: dynamodb:*
  ParameterVPC:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/VPC"
      Tier: Standard
      Type: String
      Value:
        Ref: VPC
  ParameterDbSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/DbSecurityGroup"
      Tier: Standard
      Type: String
      Value:
        Ref: DBSecurityGroup
  ParameterLambdaSecurityGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/LambdaSecurityGroup"
      Tier: Standard
      Type: String
      Value:
        Ref: LambdaSecurityGroup
  ParameterRDSSubnetGroup:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/RDSSubnetGroup"
      Tier: Standard
      Type: String
      Value:
        Ref: DBSubnetGroup
  ParameterPublicSubnets:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/PublicSubnets"
      Tier: Standard
      Type: String
      Value: !Ref PublicSubnet
  ParameterAppSubnets:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/LambdaSubnets"
      Tier: Standard
      Type: StringList
      Value:
        Fn::Join:
          - ","
          - - Ref: LambdaSubnet1
            - Ref: LambdaSubnet2
  ParameterDBSubnets:
    Type: AWS::SSM::Parameter
    Properties:
      Name:
        Fn::Sub: "/NETWORKING/#{AWS::StackName}/DBSubnets"
      Tier: Standard
      Type: StringList
      Value:
        Fn::Join:
          - ","
          - - Ref: DbSubnet1
            - Ref: DbSubnet2
#Outputs:
#  VPC:
#  Description: VPC logical resource ID
#  Value:
#    Ref: VPC
#  Export:
#    Name:
#      Fn::Sub: "${AWS::StackName}-VPC"